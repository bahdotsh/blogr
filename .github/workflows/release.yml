name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Generate changelog and create GitHub release
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.git-cliff.outputs.content }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for git-cliff

      - name: Get version from tag
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Generate changelog
        id: git-cliff
        run: |
          # Generate changelog for the current version
          git cliff --tag ${{ steps.get-version.outputs.version }} --strip header > CHANGELOG_CURRENT.md
          
          # Also update the full changelog
          git cliff --output CHANGELOG.md
          
          # Set output for GitHub release
          {
            echo 'content<<EOF'
            cat CHANGELOG_CURRENT.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Upload changelog artifacts
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: |
            CHANGELOG.md
            CHANGELOG_CURRENT.md

  # Build release binaries
  build:
    name: Build Release
    needs: changelog
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: blogr
            asset_name: blogr-linux-x86_64
          - os: windows-latest
            artifact_name: blogr.exe
            asset_name: blogr-windows-x86_64.exe
          - os: macos-latest
            artifact_name: blogr
            asset_name: blogr-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Install cargo-chef for optimized dependency caching
      - name: Install cargo-chef
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-chef


      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      # Prepare the build plan for cargo-chef
      - name: Prepare build plan
        run: cargo chef prepare --recipe-path recipe.json

      # Cook dependencies (this will be cached)
      - name: Cook dependencies
        run: cargo chef cook --release --recipe-path recipe.json

      # Build the release binary
      - name: Build release binary
        run: cargo build --release --bin blogr

      # Create release archive
      - name: Create release archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/release
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          echo "ASSET_PATH=target/release/${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV

      - name: Create release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/release
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          echo "ASSET_PATH=target/release/${{ matrix.asset_name }}.zip" >> $env:GITHUB_ENV
          echo "ASSET_NAME=${{ matrix.asset_name }}.zip" >> $env:GITHUB_ENV

      # Upload build artifacts
      - name: Upload build artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/release/${{ matrix.asset_name }}.tar.gz

      - name: Upload build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/release/${{ matrix.asset_name }}.zip

  # Create GitHub release
  release:
    name: Create GitHub Release
    needs: [changelog, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v6

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.changelog.outputs.version }}
          name: Release ${{ needs.changelog.outputs.version }}
          body: ${{ needs.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.changelog.outputs.version, '-') }}
          files: |
            blogr-linux-x86_64/blogr-linux-x86_64.tar.gz
            blogr-windows-x86_64/blogr-windows-x86_64.exe.zip
            blogr-macos-aarch64/blogr-macos-aarch64.tar.gz
            changelog/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io (optional)
  publish:
    name: Publish to Crates.io
    needs: [changelog, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Publish blogr-themes to crates.io
        run: cargo publish --package blogr-themes --token $CARGO_REGISTRY_TOKEN
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Wait for blogr-themes to be available
        run: sleep 30

      - name: Publish blogr-cli to crates.io
        run: cargo publish --package blogr-cli --token $CARGO_REGISTRY_TOKEN
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
